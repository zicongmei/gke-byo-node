#!/bin/bash

# ==============================================================================
# setup-worker.sh
#
# Description: Configures an Ubuntu machine to be a Kubernetes worker node.
#              This script is intended to be run with arguments generated by
#              the companion `generate-worker-args.sh` script.
#
# Usage: See the --help flag.
# ==============================================================================

set -euo pipefail

# --- Default values ---
NODE_NAME=""
API_SERVER_URL=""
CLUSTER_CA_CERT_BASE64=""
NODE_PRIVATE_KEY_BASE64=""
CLUSTER_DNS_IP="10.96.0.10"

# --- Argument Parsing ---
print_usage() {
    echo "Usage: $0 --name <node-name> --api-url <k8s-api-url> --ca-cert-base64 <ca-cert> --node-key-base64 <node-key> --cluster-dns-ip <dns-ip>"
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --name) NODE_NAME="$2"; shift ;;
        --api-url) API_SERVER_URL="$2"; shift ;;
        --ca-cert-base64) CLUSTER_CA_CERT_BASE64="$2"; shift ;;
        --node-key-base64) NODE_PRIVATE_KEY_BASE64="$2"; shift ;;
        --cluster-dns-ip) CLUSTER_DNS_IP="$2"; shift ;;
        --help) print_usage; exit 0 ;;
        *) echo "Unknown parameter passed: $1"; print_usage; exit 1 ;;
    esac
    shift
done

if [ -z "$NODE_NAME" ] || [ -z "$API_SERVER_URL" ] || [ -z "$CLUSTER_CA_CERT_BASE64" ] || [ -z "$NODE_PRIVATE_KEY_BASE64" ]; then
    echo "Error: Missing required arguments."
    print_usage
    exit 1
fi

echo "--- Starting Kubernetes Worker Node Setup for ${NODE_NAME} ---"

# --- Step 1: System Preparation ---
echo "--> [1/6] Preparing system: updating packages and disabling swap..."
apt-get update >/dev/null
apt-get install -y ca-certificates curl gpg apt-transport-https >/dev/null
swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
echo "  [✓] System prepared."

# --- Step 2: Install Container Runtime (containerd) ---
echo "--> [2/6] Installing containerd runtime..."
apt-get install -y containerd >/dev/null
mkdir -p /etc/containerd
containerd config default > /etc/containerd/config.toml
# Set cgroup driver to systemd
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
systemctl restart containerd
echo "  [✓] Containerd installed and configured."

# --- Step 3: Install Kubernetes Components ---
echo "--> [3/6] Installing kubelet, kubeadm, and kubectl..."
mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list >/dev/null
apt-get update >/dev/null
apt-get install -y kubelet kubeadm kubectl >/dev/null
apt-mark hold kubelet kubeadm kubectl
echo "  [✓] Kubernetes components installed."

# --- Step 4: Configure Kubernetes Directories and Credentials ---
echo "--> [4/6] Placing credentials and kubeconfig files..."
mkdir -p /var/lib/kubelet /var/lib/kube-proxy /etc/kubernetes/pki

# Decode and place credentials
echo "${CLUSTER_CA_CERT_BASE64}" | base64 -d > /etc/kubernetes/pki/ca.crt
echo "${NODE_PRIVATE_KEY_BASE64}" | base64 -d > "/var/lib/kubelet/${NODE_NAME}.key"
chmod 600 "/var/lib/kubelet/${NODE_NAME}.key"

# Create kubelet.kubeconfig
# The kubeconfig for kubelet should contain cluster details and point to the private key.
# Kubelet will use this private key to generate a CSR, and once approved by the
# control plane, it will fetch and use its client certificate.
kubectl config set-cluster k8s-manual --server="${API_SERVER_URL}" --certificate-authority=/etc/kubernetes/pki/ca.crt --kubeconfig=/var/lib/kubelet/kubeconfig --embed-certs=true >/dev/null
kubectl config set-credentials "system:node:${NODE_NAME}" --client-key="/var/lib/kubelet/${NODE_NAME}.key" --kubeconfig=/var/lib/kubelet/kubeconfig >/dev/null
kubectl config set-context default --cluster=k8s-manual --user="system:node:${NODE_NAME}" --kubeconfig=/var/lib/kubelet/kubeconfig >/dev/null
kubectl config use-context default --kubeconfig=/var/lib/kubelet/kubeconfig >/dev/null

# Create kube-proxy.kubeconfig
kubectl config set-cluster k8s-manual --server="${API_SERVER_URL}" --certificate-authority=/etc/kubernetes/pki/ca.crt --kubeconfig=/var/lib/kube-proxy/kubeconfig --embed-certs=true >/dev/null
kubectl config set-credentials kube-proxy --token="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token 2>/dev/null || echo 'dummy-token')" --kubeconfig=/var/lib/kube-proxy/kubeconfig >/dev/null
kubectl config set-context default --cluster=k8s-manual --user=kube-proxy --kubeconfig=/var/lib/kube-proxy/kubeconfig >/dev/null
kubectl config use-context default --kubeconfig=/var/lib/kube-proxy/kubeconfig >/dev/null

echo "  [✓] Credentials and kubeconfigs created."

# --- Step 5: Configure Kubelet Service ---
echo "--> [5/6] Creating kubelet configuration and systemd service..."

# Clean up any kubeadm-generated drop-ins for kubelet service.
# This prevents conflicting configurations like bootstrap-kubeconfig environment variables.
echo "  --> Removing existing kubelet service drop-in configurations..."
rm -rf /etc/systemd/system/kubelet.service.d/*
echo "  [✓] Cleaned up old kubelet service configurations."

# Kubelet config file
cat > /var/lib/kubelet/config.yaml <<EOF
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: "systemd"
authentication:
  anonymous:
    enabled: false
  webhook:
    enabled: true
  x509:
    clientCAFile: "/etc/kubernetes/pki/ca.crt"
authorization:
  mode: Webhook
clusterDNS:
  - "${CLUSTER_DNS_IP}"
clusterDomain: "cluster.local"
rotateCertificates: true
EOF

# Kubelet systemd service file
cat > /etc/systemd/system/kubelet.service <<EOF
[Unit]
Description=Kubernetes Kubelet
Documentation=https://github.com/kubernetes/kubernetes
After=containerd.service
Requires=containerd.service

[Service]
ExecStart=/usr/bin/kubelet \\
  --config=/var/lib/kubelet/config.yaml \\
  --kubeconfig=/var/lib/kubelet/kubeconfig \\
  --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
  --register-node=true \\
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

echo "  [✓] Kubelet service configured."

# --- Step 6: Start Services ---
echo "--> [6/6] Enabling and starting kubelet service..."
systemctl daemon-reload
systemctl enable --now kubelet >/dev/null
echo "  [✓] Kubelet service started."
echo
echo "------------------------------------------------------------------------"
echo "  [SUCCESS] Worker node setup is complete."
echo "------------------------------------------------------------------------"
echo "The kubelet will now attempt to register with the control plane."
echo "You must now APPROVE THE CERTIFICATE on the control plane machine."
echo "------------------------------------------------------------------------"